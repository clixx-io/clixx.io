#!/usr/bin/python

import argparse
import sys

sys.path.append("src")

from clixxIO  import *

parser = argparse.ArgumentParser(description='Command Line Device Interface.')

useage = """
clixx.io Command Line
---------------------

clixx.io with command line interface to monitor
sensors. 

 clixx.io --latest log Temp1      # Display the log
 clixx.io info Temp1              # Info about the sensor
 cixx.io disconnect Temp1         # Safely disconnect the device
 clixx.io connect Temp1

 clixx.io list                    # List all devices
 
 clixx.io brandname "Scrooge Engineering"
 
 clixx.io webserver start
 clixx.io webserver stop

 clixx.io add button pin/gpio X
 clixx.io add led d1
 clixx.io rm Temp1
 clixx.io start Temp1
 clixx.io stop Temp1
 
"""

if __name__ == "__main__":

    template_colors = ["black","white","lime","green","emerald","teal","blue","cyan","cobalt",
					   "indigo","violet","pink","magenta","crimson","red","orange","amber",
					   "yellow","brown","olive","steel","mauve","taupe","gray","dark","darker",
					   "darkBrown","darkCrimson","darkMagenta","darkIndigo","darkCyan","darkCobalt",
					   "darkTeal","darkEmerald","darkGreen","darkOrange","darkRed","darkPink",
					   "darkViolet","darkBlue","lightBlue","lightRed","lightGreen","lighterBlue",
					   "lightTeal","lightOlive","lightOrange","lightPink","grayDark","grayDarker",
					   "gray","LightgrayLighter"]

    parser = argparse.ArgumentParser()
    parser.add_argument('operation', nargs='+', help="Perform an operation on a device [add/remove/activate/deactive/list/history/status]")

    parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")
   
    args = parser.parse_args()

    projects = clixxIOListProjects()
    
    if args.operation[0]=="list":
        
        if len(args.operation)==1:
            print("Current Projects\nName--------------------- Type------------------------ Status------------------")
            types = clixxIOListProjectbyType()
            statuses = clixxIOListProjectbyStatus()
            
            for p in projects:
                print("%s %s %s" % ('{:25}'.format(p),'{:<26}'.format(types[p]),'{:<26}'.format(statuses[p])))
                
        else:
            if args.operation[1]=="autostarts":
                autostarts = clixxIOProjectAutostarts()
                print autostarts
                sys.exit(0)

            if args.operation[1]=="input_channels":
                projname = args.operation[2]
                print(clixxIOListProjectMqttSubs(projname))
                sys.exit(0)

            elif args.operation[1]=="output_channels":
                projname = args.operation[2]
                print(clixxIOListProjectMqttPubs(projname))
                sys.exit(0)

            elif args.operation[1]=="commands":
                projname = args.operation[2]
                print(clixxIOListProjectMqttCommands(projname))
                sys.exit(0)
                
            else:
                print("Command error \"%s\" not understood" % args.operation[1])
                sys.exit(0)

    elif args.operation[0]=="pubs":
        
        projname = args.operation[1]
        projects = clixxIOListProjects()
        
        if projname in projects:
            print(clixxIOListProjectMqttPubs(projname))
        else:
            print("%s  is not a valid project" % projname)
            sys.exit(1)

    elif args.operation[0]=="subs":
        
        projname = args.operation[1]
        projects = clixxIOListProjects()
        
        if projname in projects:
            print(clixxIOListProjectMqttSubs(projname))
        else:
            print("%s  is not a valid project" % projname)
            sys.exit(1)
            
    elif args.operation[0]=="commands":
        projname = args.operation[1]
        print(clixxIOListProjectMqttCommands(projname))
        sys.exit(0)
            
    elif args.operation[0]=="add":

        if args.operation[1]=="sub":
            # Add a new project
            projname = args.operation[2]
            clixxIO.clixxIOAddProjectMqttSub(projname,args.operation[3])
            sys.exit(0)
            
        if args.operation[1]=="pub":
            # Add a new project
            projname = args.operation[2]
            clixxIOAddProjectMqttPub(projname, args.operation[3])
            sys.exit(0)
            
        if args.operation[1]=="command":
            # Add a new project
            projname = args.operation[2]
            clixxIO.clixxIOAddProjectMqttCommands(projname,args.operation[3])

    elif args.operation[0]=="log":

        if (len(args.operation) == 1):

            if not os.path.exists(clixxIOSystemLogFile()):
                print("Log file %s doesn't exist" % clixxIOSystemLogFile())
                sys.exit(1)
                
            content = []
            linestoshow = 15
            
            with open(clixxIOSystemLogFile()) as f:
                content = f.readlines()
                
            if len(content) > linestoshow:
                for l in range(len(content)-linestoshow,len(content)):
                    print(content[l].strip())
            else:
                for l in content:
                    print l.strip()
                
        if (len(args.operation)>1):
            
            if args.operation[1]=="location":
                
                logfilestatus = "File does not exist."
                
                if os.path.exists(clixxIOSystemLogFile()):
                    statinfo = os.stat(clixxIOSystemLogFile())
                    logfilestatus = "%d bytes" % statinfo.st_size
                    
                print("Log file location is %s, %s" % (clixxIOSystemLogFile(),logfilestatus))
                sys.exit(0)

    elif args.operation[0]=="new":

        if args.operation[1]=="project":
            # Add a new project
            projname = args.operation[2]
            projtype = None
            
            if args.operation[3]=="for":
                
                allowable_projecttypes = ["python","c++","esp8266"]
                
                if args.operation[4] in allowable_projecttypes:
                    projtype = args.operation[4]
                else:
                    print("Unrecognised platform %s - must be %s" % (args.operation[4],', '.join(allowable_projecttypes)))
                    sys.exit(1)
            
            print("Creating new project %s for %s" % (projname,projtype))
            
            sys.exit(clixxIOAddProject(projname,projtype))
            
        else:
            print("Unrecognised option %s" % args.operation[1])
            sys.exit(1)
            
    elif args.operation[0]=="remove":

        # Add a new project
        if args.operation[1] in projects:
            print("Removing project")
            sys.exit(clixxIORemoveProject(args.operation[1]))
        else:
            print("Invalid Project name %s. This project does not exist." % args.operation[1])
            
    elif args.operation[0]=="show":
        
        if args.operation[1]=="config":
            
            # Show the location of the configuratino
            print("Configuration file location is set to %s" % configPath())
            
            if (os.path.exists(configPath())):
                
                pass
                
            else:
                
                print("Configuration file %s doesn't exist." % configPath())
            
            sys.exit(0)
            
        else:
            print("Invalid parameter")

    elif args.operation[0]=="value":
		
        # Change the latest value in a project
        if args.operation[1] in projects:
            projname = args.operation[1]
        else:
            print("Error: Invalid Project name %s. This project does not exist." % args.operation[1])
            sys.exit(1)
            
        p = clixxIOProject(projname)
            
        last_value = args.operation[2]
        
        p.setConfig('Status','last_value',last_value)
        p.writeConfig()
            
        print("Operation succeeded. Last value for project %s set to %s." % (projname, last_value))
            
        sys.exit(0)
        
    elif args.operation[0]=='history':
        print(clixxIOLatestValues(args.device[1]))
    elif args.operation[0]=="status":
        print(clixxIOReadDevice(args.device[1]))
    elif args.operation[0]=='scan':
        
        if args.operation[1] in ["mac","ip","serial","i2c"]:
            print("Error: Scan network for %s addresses. Not Implemented." % args.operation[1])
            sys.exit(1)
        else:
            print("Invalid Option")
            
    elif args.operation[0]=='watch':
        pass

    elif args.operation[0]=="package":

        # Change the latest value in a project
        if args.operation[1] in projects:
            projname = args.operation[1]
        else:
            print("Error: Invalid Project name %s. This project does not exist." % args.operation[1])
            sys.exit(1)
            
        r = clixxIOProjectRepository()
        
        print("Creating package for Project %s." % args.operation[1])
        r.create_zippackagefile(projectname=projname)
        sys.exit(0)

    elif args.operation[0]=="packagedir":

        # Change the latest value in a project
        if os.path.exists(args.operation[1]) and os.path.isdir(args.operation[1]):
            dirname = os.path.abspath(args.operation[1])
        else:
            print("Error: Directory %s does not exist" % args.operation[1])
            sys.exit(1)
            
        r = clixxIOProjectRepository()
        
        print("Creating package for directory %s" % dirname)
        r.create_zippackagefile(projectdir=dirname)
        sys.exit(0)

    elif args.operation[0]=="unpackage":

        # Change the latest value in a project
        if os.path.exists(args.operation[1]):
            pkgname = args.operation[1]
        else:
            print("Error: Package file doesnt exist %s." % args.operation[1])
            sys.exit(1)
            
        r = clixxIOProjectRepository()
        
        print("Unpacking package file for %s." % args.operation[1])
        r.extract_zippackagefile(pkgname)
        sys.exit(0)

    elif args.operation[0]=="web":

        # Add a new project
        if args.operation[2] in projects:
            projname = args.operation[2]
        else:
            print("Error: Invalid Project name %s. This project does not exist." % args.operation[2])
            sys.exit(1)
            
        p = clixxIOProject(projname)
            
        if args.operation[1] == "http_redirect":
            
            http_redirect = args.operation[3]
            
            p.setConfig('Web_Interface','http_redirect',http_redirect)
            p.writeConfig()
            
            print("Operation succeeded. Web redirection of Tile %s set to %s." % (projname, http_redirect))
            
            sys.exit(0)
            
        elif args.operation[1] == "hide":
            
            p.setConfig('Web_Interface','show_icon','False')
            p.writeConfig()
            
            print("Operation succeeded. Web Tile %s display set to false." % (projname))
            
            sys.exit(0)
            
        elif args.operation[1] == "show":
            
            p.setConfig('Web_Interface','show_icon','True')
            p.writeConfig()

            print("Operation succeeded. Web Tile %s display set to true." % (projname))
            
            sys.exit(0)
            
        elif args.operation[1] == "redirect_mac":
            
            redirect_mac = args.operation[3]
            
            p.setConfig('Web_Interface','redirect_mac',redirect_mac)
            p.writeConfig()
            sys.exit(0)

        elif args.operation[1] == "tileimage":
            
            webgraphic = args.operation[3]
            
            p.setConfig('Web_Interface','tileimage',webgraphic)
            p.writeConfig()
            
            print("Operation succeeded. Web Tile graphic %s display set to %s" % (projname,webgraphic))
            
            sys.exit(0)

        elif args.operation[1] == "tilecolor":
            
            tilecolor = args.operation[3]

            if not tilecolor in template_colors:
				
				print("Error: Unknown tile color. Valid options are %s." % ", ".join(template_colors))
				sys.exit(1)
                          
            tilecolor = "bg-" + tilecolor
            
            p.setConfig('Web_Interface','tilecolor',tilecolor)
            p.writeConfig()
            
            print("Operation succeeded. Web Tile color %s display set to %s" % (projname,tilecolor))
            
            sys.exit(0)

        elif args.operation[1] == "tiledescription":
            
            tiledescription = args.operation[3]
            
            p.setConfig('Web_Interface','tiledescription',tiledescription)
            p.writeConfig()
            sys.exit(0)

        elif args.operation[1] == "pulldowndescription":
            
            icondescription = args.operation[3]
            
            p.setConfig('Web_Interface','pulldowndescription',icondescription)
            p.writeConfig()
            sys.exit(0)

        elif args.operation[1] == "iconaction":
            iconaction = None
            if args.operation[3] == "webip":
                webip = args.operation[4]
                iconaction = args.operation[3]
            elif args.operation[3] == "button":
                iconaction = args.operation[3]
            elif args.operation[3] == "iconaction":
                iconaction = args.operation[3]
            elif args.operation[3] == "display":
                iconaction = args.operation[3]
            else:
                print("Option %s not recognised." % (args.operation[3]))
                sys.exit(1)

            print("Error: Assign IconAction on project %s to %s. Not Implemented." % (projname,iconaction))
            sys.exit(1)
            
        else:
            print("Error: Unrecognised option %s." % (args.operation[1]))
            sys.exit(1)
            
    else:
        print("Unknown command.")
